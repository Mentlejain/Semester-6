# -*- coding: utf-8 -*-
"""Assignment 1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Fz9XD9r2AeabNlbRISIucf8sp6fe8Yqu

# **Python Assignment**
by Arnav Kumar Jain

**Write a Python program and submit the IPython Notebook and corresponding pdf version. Please use modular programming approach.**

## 1. Sum of digits of a number

Python code for the given problem
"""

def getDigitSum(n):

    """Objective: Get Sum of digits of the number
    Returns:sum Type:int
    """
    return sum([int(i) for i in n if i.isdigit()])
if __name__=="__main__":
    print(getDigitSum(input("Enter a number: ")))

"""The Above Code Works for all Integers and Floating point numbers (both negative and positive)

## 2. Print the following patterns

###Pattern A
       1   2   3   4   5
       1   2   3   4 
       1   2   3  
       1   2   
       1
"""

def patternA(n):
    for i in range(n,0,-1):
        for j in range(1,i+1):
            print(j,end="   ")
        print('\n')
patternA(5) #Example Output

"""###Pattern B
       5
       5   4
       5   4   3
       5   4   3   2
       5   4   3   2   1
"""

def patternB(n):
    for i in range(5,0,-1):
        for j in range(5,i-1,-1):
            print(j,end="   ")
        print('\n')
patternB(5) #Example Output

"""###Pattern C
            1
        2   1   2
    3   2   1   2   3
"""

def patternC(n):
    for i in range(0,n,1):
        for j in range(1,2*n,1):
            if j<(n-i) or j>(n+i):
                print(" ",end="  ")
            else:
                print((n-j)%n+1,end="  ") if j<n else print(j%n+1,end="  ")
        print('\n')
patternC(3) #Example Output

"""### Driver Code"""

def main():
    n=int(input("Enter number of rows: "))
    print("""Select a pattern to print
    Pattern A
    Pattern B
    Pattern C\n""")
    op=input("Pattern: ").upper()
    print()
    #patternA(n) if op=='A' else (patternB if op=='B' else (patternC if op=='C' else print("Invalid Option"))) 
    eval("pattern"+op+"("+str(n)+")") if op in ['A','B','C'] else print("Invalid Option")
if __name__=="__main__":
    main()